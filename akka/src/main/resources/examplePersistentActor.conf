akka {

  loglevel = "INFO"
  log-dead-letters = on

  ## extensions = akka.persistence.Persistence

  ## akka.persistence.max-concurrent-recoveries = 50

  persistence {

      journal.plugin = "akka-persistence-sql-async.journal"
      snapshot-store.plugin = "akka-persistence-sql-async.snapshot-store"
      max-concurrent-recoveries = 10
  }

//  actor {
//    serializers {
////      sample-persistent-repr = "sample.serializer.SamplePersistentReprSerializer"
////      sample-snapshot = "sample.serializer.SampleSnapshotSerializer"
//      java = "akka.serialization.JavaSerializer"
//    }
//
//    serialization-bindings {
////      "akka.persistence.PersistentRepr" = sample-persistent-repr
////      "akka.persistence.serialization.Snapshot" = sample-snapshot
//      "com.lb.scala.akka.persistent.Cmd" = java
//      "com.lb.scala.akka.persistent.Evt" = java
//      "com.lb.scala.akka.persistent.ExampleState" = java
//    }
//  }

 // log-dead-letters-during-shutdown = on

}

akka-persistence-sql-async {
  journal.class = "akka.persistence.journal.sqlasync.MySQLAsyncWriteJournal"
  snapshot-store.class = "akka.persistence.snapshot.sqlasync.MySQLSnapshotStore"

  user = "root"
  password = "123456"
  url = "jdbc:mysql://localhost:3306/akka-persistence-demo"
  max-pool-size = 4
  wait-queue-capacity = 10000

  metadata-table-name = "persistence_metadata"
  journal-table-name =  "persistence_journal"
  snapshot-table-name = "persistence_snapshot"
}